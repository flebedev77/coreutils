#pragma once
#include <string>

std::string help_message = "Usage: cp [OPTION]... [-T] SOURCE DEST \n or:  cp [OPTION]... SOURCE... DIRECTORY\n or:  cp [OPTION]... -t DIRECTORY SOURCE...\n Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n \n Mandatory arguments to long options are mandatory for short options too.\n -a, --archive                same as -dR --preserve=all\n --attributes-only        don't copy the file data, just the attributes\n --backup[=CONTROL]       make a backup of each existing destination file\n -b                           like --backup but does not accept an argument\n --copy-contents          copy contents of special files when recursive\n -d                           same as --no-dereference --preserve=links\n --debug                  explain how a file is copied.  Implies -v\n -f, --force                  if an existing destination file cannot be\n opened, remove it and try again (this option\n is ignored when the -n option is also used)\n -i, --interactive            prompt before overwrite (overrides a previous -n\n option)\n -H                           follow command-line symbolic links in SOURCE\n -l, --link                   hard link files instead of copying\n -L, --dereference            always follow symbolic links in SOURCE\n -n, --no-clobber             (deprecated) silently skip existing files.\n See also --update\n -P, --no-dereference         never follow symbolic links in SOURCE\n -p                           same as --preserve=mode,ownership,timestamps\n --preserve[=ATTR_LIST]   preserve the specified attributes\n --no-preserve=ATTR_LIST  don't preserve the specified attributes\n --parents                use full source file name under DIRECTORY\n -R, -r, --recursive          copy directories recursively\n --reflink[=WHEN]         control clone/CoW copies. See below\n --remove-destination     remove each existing destination file before\n attempting to open it (contrast with --force)\n --sparse=WHEN            control creation of sparse files. See below\n --strip-trailing-slashes  remove any trailing slashes from each SOURCE\n argument\n -s, --symbolic-link          make symbolic links instead of copying\n -S, --suffix=SUFFIX          override the usual backup suffix\n -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\n -T, --no-target-directory    treat DEST as a normal file\n --update[=UPDATE]        control which existing files are updated;\n UPDATE={all,none,none-fail,older(default)}\n -u                           equivalent to --update[=older].  See below\n -v, --verbose                explain what is being done\n --keep-directory-symlink  follow existing symlinks to directories\n -x, --one-file-system        stay on this file system\n -Z                           set SELinux security context of destination\n file to default type\n --context[=CTX]          like -Z, or if CTX is specified then set the\n SELinux or SMACK security context to CTX\n --help        display this help and exit\n --version     output version information and exit\n \n ATTR_LIST is a comma-separated list of attributes. Attributes are 'mode' for\n permissions (including any ACL and xattr permissions), 'ownership' for user\n and group, 'timestamps' for file timestamps, 'links' for hard links, 'context'\n for security context, 'xattr' for extended attributes, and 'all' for all\n attributes.\n \n By default, sparse SOURCE files are detected by a crude heuristic and the\n corresponding DEST file is made sparse as well.  That is the behavior\n selected by --sparse=auto.  Specify --sparse=always to create a sparse DEST\n file whenever the SOURCE file contains a long enough sequence of zero bytes.\n Use --sparse=never to inhibit creation of sparse files.\n \n UPDATE controls which existing files in the destination are replaced.\n 'all' is the default operation when an --update option is not specified,\n and results in all existing files in the destination being replaced.\n 'none' is like the --no-clobber option, in that no files in the\n destination are replaced, and skipped files do not induce a failure.\n 'none-fail' also ensures no files are replaced in the destination,\n but any skipped files are diagnosed and induce a failure.\n 'older' is the default operation when --update is specified, and results\n in files being replaced if they're older than the corresponding source file.\n \n When --reflink[=always] is specified, perform a lightweight copy, where the\n data blocks are copied only when modified.  If this is not possible the copy\n fails, or if --reflink=auto is specified, fall back to a standard copy.\n Use --reflink=never to ensure a standard copy is performed.\n \n The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\n The version control method may be selected via the --backup option or through\n the VERSION_CONTROL environment variable.  Here are the values:\n \n none, off       never make backups (even if --backup is given)\n numbered, t     make numbered backups\n existing, nil   numbered if numbered backups exist, simple otherwise\n simple, never   always make simple backups\n \n As a special case, cp makes a backup of SOURCE when the force and backup\n options are given and SOURCE and DEST are the same name for an existing,\n regular file.\n \n GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n Full documentation <https://www.gnu.org/software/coreutils/cp>\n or available locally via: info '(coreutils) cp invocation'\n";
